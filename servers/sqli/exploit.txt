VULNERABILITY DESCRIPTION
SQL Injection (SQLi) is a vulnerability that allows an attacker to interfere with the queries an application makes to its database. This occurs when an application does not properly sanitize user inputs before incorporating them into SQL queries. An attacker can exploit this vulnerability to view sensitive data, modify or delete data, and in some cases execute commands on the server.

EXPLOIT
How it works:
1 - You identify a vulnerable form that interacts with a database (login, search, etc.)
2 - In the username field, you enter: admin'--
3 - You leave the password field empty or enter any value
4 - The application generates the query: SELECT * FROM users WHERE username = 'admin'--' AND password = '...'
5 - The -- characters comment out the rest of the query, avoiding password verification
6 - If an "admin" user exists, the application logs in as that user

This exploit is tested on the vulnerable server at http://localhost:3000
You can run the exploit with next command:
curl http://localhost:3000/login-vulnerable -d "username=admin'--"

You can try other queries like:
curl http://localhost:3000/login-vulnerable -d "password=' OR '1'='1"

Vulnerable code example:
const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;

Secure code example using prepared statements:
const query = `SELECT * FROM users WHERE username = ? AND password = ?`;
db.all(query, [username, password], (err, rows) => { ... });


